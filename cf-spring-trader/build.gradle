buildscript {
	ext {
 	    springBootVersion = '1.4.2.RELEASE' 
 	    springCloudDependenciesVersion = 'Camden.SR2'
 	    pivotalSCSVersion = '1.3.0.RELEASE'
		junitVersion = '4.12'
		mysqlVersion = '5.1.35'
		bootstrapVersion = '2.3.2'
	}

	repositories {
		mavenCentral()
	}

	buildscript {
		dependencies {
			classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		}
	}

}


// Apply versioning to all projects from versioning script.
allprojects { apply from: "$rootDir/gradle/versioning.gradle" }

subprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'jacoco'


	jacoco { toolVersion = "0.7.1.201405082137" //	reportsDir = file("$buildDir/customJacocoReportDir")
	}
	jacocoTestReport {
		group = "Reporting"
		description = "Generate Jacoco coverage reports after running tests."
		additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
	}

	test { finalizedBy jacocoTestReport }

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	repositories {
		mavenCentral()
	}
	
	dependencies {

		//test packages
		testCompile "junit:junit:$junitVersion"

	}
}

project(':springboottrades-accounts') {
	apply plugin: 'org.springframework.boot'
	jar { baseName = 'accounts' }
	description = "Micro-service to deal with accounts and user logins"
		
	dependencyManagement {
	    imports {
	        mavenBom "io.pivotal.spring.cloud:spring-cloud-services-dependencies:${pivotalSCSVersion}"
	        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudDependenciesVersion}"
	    }
	}

	dependencies {
	    compile('io.pivotal.spring.cloud:spring-cloud-services-starter-config-client')
	    compile('io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry')
		compile('org.springframework.boot:spring-boot-starter-jersey')
		compile('org.springframework.boot:spring-boot-starter-data-jpa')
		compile('org.springframework.boot:spring-boot-starter-web')
	
		testCompile('org.springframework.boot:spring-boot-starter-test')	

		// test packages
		testRuntime "com.jayway.jsonpath:json-path"
        testRuntime "org.hsqldb:hsqldb"

		// Runtime
        runtime "mysql:mysql-connector-java:${mysqlVersion}"
	}
}

project(':springboottrades-quotes') {
	apply plugin: 'org.springframework.boot'
	jar { baseName = 'quotes' }
	description = "Micro-service to retrieve up to date quotes"
		
	dependencyManagement {
	    imports {
	        mavenBom "io.pivotal.spring.cloud:spring-cloud-services-dependencies:${pivotalSCSVersion}"
	    	mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudDependenciesVersion}"
	    }
	}
	
	dependencies {
	    compile('io.pivotal.spring.cloud:spring-cloud-services-starter-config-client')
	    compile('io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry')
		compile('org.springframework.boot:spring-boot-starter-jersey')
		compile('org.springframework.boot:spring-boot-starter-web')
	
		testCompile('org.springframework.boot:spring-boot-starter-test')	

		//runtime

		//test packages
		testRuntime "com.jayway.jsonpath:json-path"
	}
}

project(':springboottrades-portfolio') {
	apply plugin: 'org.springframework.boot'
	jar { baseName = 'portfolio' }
	description = "Micro-service to manage portfolios"
		
	dependencyManagement {
	    imports {
	        mavenBom "io.pivotal.spring.cloud:spring-cloud-services-dependencies:${pivotalSCSVersion}"
	        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudDependenciesVersion}"
	    }
	}
	
	dependencies {
        compile('io.pivotal.spring.cloud:spring-cloud-services-starter-circuit-breaker')
	    compile('io.pivotal.spring.cloud:spring-cloud-services-starter-config-client')
	    compile('io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry')
		compile('org.springframework.boot:spring-boot-starter-data-jpa')
		compile('org.springframework.boot:spring-boot-starter-jersey')
		compile('org.springframework.boot:spring-boot-starter-web')
	
		testCompile('org.springframework.boot:spring-boot-starter-test')	

		//runtime
		runtime "mysql:mysql-connector-java:${mysqlVersion}"

		//test packages
		testRuntime "com.jayway.jsonpath:json-path"
		testRuntime "org.hsqldb:hsqldb"
	}
}

project(':springboottrades-web') {
	apply plugin: 'org.springframework.boot'
	apply plugin: "io.spring.dependency-management"


	jar { baseName = 'web' }
	description = "Web interface to the springboot set of services"
		
	dependencyManagement {
	    imports {
	        mavenBom "io.pivotal.spring.cloud:spring-cloud-services-dependencies:${pivotalSCSVersion}"
	        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudDependenciesVersion}"	    
	    }
	}

	dependencies {
	    compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity4:2.1.2.RELEASE"
	
        compile('io.pivotal.spring.cloud:spring-cloud-services-starter-circuit-breaker')
	    compile('io.pivotal.spring.cloud:spring-cloud-services-starter-config-client')
	    compile('io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry')
		compile('org.springframework.boot:spring-boot-starter-jersey')
		compile('org.springframework.boot:spring-boot-starter-security')
		compile('org.springframework.boot:spring-boot-starter-web')
		compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	
		testCompile('org.springframework.boot:spring-boot-starter-test')	
	
		runtime "org.webjars:bootstrap:${bootstrapVersion}"
	}
}

task wrapper(type: Wrapper) { gradleVersion = '2.3' }
